// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  wallet      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  balances    Balance[]
  nftTokens   NFT[]
  retirements Retirement[]
  listings    Listing[]    @relation("UserListings")
  purchases   Purchase[]   @relation("UserPurchases")
  projects    Project[]
  votes       Vote[]

  Proposal Proposal[]

  Stake Stake[]

  Fee Fee[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  status      ProjectStatus @default(PENDING)
  documents   Document[]
  votes       Vote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
}

model Document {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  cid         String
  name        String
  uploadedAt  DateTime @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  voterId   String
  voter     User     @relation(fields: [voterId], references: [id])
  weight    Int
  createdAt DateTime @default(now())
}

model NFT {
  id          String   @id @default(uuid())
  mintAddress String   @unique
  vintage     DateTime
  tonnage     Float
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  metadataCID String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  burned      Boolean  @default(false)

  retirements Retirement[]
  listings    Listing[]
}

model Retirement {
  id            String   @id @default(uuid())
  nftId         String
  nft           NFT      @relation(fields: [nftId], references: [id])
  retiredAt     DateTime
  txSignature   String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model Listing {
  id            String   @id @default(uuid())
  nftId         String
  nft           NFT      @relation(fields: [nftId], references: [id])
  sellerId      String
  seller        User     @relation("UserListings", fields: [sellerId], references: [id])
  priceLamports BigInt
  status        ListingStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchases     Purchase[]
}

model Purchase {
  id            String   @id @default(uuid())
  listingId     String
  listing       Listing  @relation(fields: [listingId], references: [id])
  buyerId       String
  buyer         User     @relation("UserPurchases", fields: [buyerId], references: [id])
  priceLamports BigInt
  purchasedAt   DateTime @default(now())
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED
}

model Balance {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id        String   @id @default(uuid())
  type      String
  data      Json
  timestamp DateTime @default(now())
}

model Fee {
  id        String   @id @default(uuid())
  amount    BigInt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Stake {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    BigInt
  createdAt DateTime @default(now())
}

model Proposal {
  id          String   @id @default(uuid())
  title       String
  description String
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  status      ProposalStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProposalStatus {
  ACTIVE
  APPROVED
  REJECTED
}